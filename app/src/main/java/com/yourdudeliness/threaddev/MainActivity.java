package com.yourdudeliness.threaddev;

import android.os.Handler;
import android.support.v4.app.FragmentActivity;
import android.support.v4.view.ViewPager;
import android.os.Bundle;
import android.view.View;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.os.CountDownTimer;

public class MainActivity extends FragmentActivity {

    public final Handler scoreHandler = new Handler();
    private final static int SECOND = 1000;
    protected static double currClickVal;
    protected static double baseClickVal = 1;
    protected static double currScore = 0;
    protected static double currPassive = 10;
    protected static int currMana = 0;
    protected static double currPassiveMana = 10;
    public static TextView scoreBox;
    public static Building neutral1, neutral2, neutral3, pathos1, pathos2, pathos3, deity;
    public static boolean pathosEnabled = false; //A flag for when the user has chosen an in-game path



    /*
    TEST VARIABLES  DELETE THESE
     */

    public static int testBonus = 100;
    public static final Handler upTestHandler = new Handler();
    public static boolean upgradeTestBool = false;
    public static int tempIncrease;

    /*
    DELETE ABOVE DELETE ABOVE
     */

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.pager_background);

        ViewPager appViewPager = new ViewPager(this);
        appViewPager.setId(View.generateViewId());

        //creates an object to reference the <LinearLayout> xml in pager_background.xml
        LinearLayout linLayout = (LinearLayout) findViewById(R.id.container);

        linLayout.addView(appViewPager);//adds the view generated by the view pager to the layout

        //assigns FragmentPagerAdapter to the PageViewer
        appViewPager.setAdapter(new FragmentAdapter(getSupportFragmentManager()));


        scoreBox = (TextView) findViewById(R.id.score_box);


        /*
        Increments the player's score once every second, printing that score
        to the screen.
         */
        scoreHandler.postDelayed(new Runnable() {

            @Override
            public void run() {
                if (true) {

                    currScore += currPassive;
                    primary_activity.printScore();
                    checkFunds();
                    currMana += currPassiveMana;
                    primary_activity.manaBar.setProgress(currMana);

                }
                scoreHandler.postDelayed(this, SECOND);
            }
        }, SECOND); // tells it to run itself again in 1 second


        currClickVal = baseClickVal;
        initializeBuildings();
    }



    private void initializeBuildings(){

        neutral1 = new Building("Farm", 10, 1);
        neutral2 = new Building("Blacksmith", 30, 5);
        neutral3 = new Building("Barracks", 50, 20);

    }


    /*
   when called, checks available funds against the cost of buildings, disabling
   buttons when funds are insufficient
    */
    public static void checkFunds(){

        if(currScore < neutral1.getCostOfNext()){

            primary_activity.n1.setEnabled(false);
        } else {
            primary_activity.n1.setEnabled(true);
        }

        if(currScore < neutral2.getCostOfNext()){

            primary_activity.n2.setEnabled(false);
        } else {
            primary_activity.n2.setEnabled(true);
        }

        if(currScore < neutral3.getCostOfNext()){

            primary_activity.n3.setEnabled(false);
        } else {
            primary_activity.n3.setEnabled(true);
        }

        /*
        Statement only runs if the pathos have been enabled, was previously getting
        a NULL OBJECT error when calling getCostOfNext() before instantiation of the ojbects
         */
        if(pathosEnabled) {
            if (currScore < pathos1.getCostOfNext()) {

                primary_activity.p1.setEnabled(false);
            } else {
                primary_activity.p1.setEnabled(true);
            }

            if (currScore < pathos2.getCostOfNext()) {

                primary_activity.p2.setEnabled(false);
            } else {
                primary_activity.p2.setEnabled(true);
            }

            if (currScore < pathos3.getCostOfNext()) {
                primary_activity.p3.setEnabled(false);
            } else {
                primary_activity.p3.setEnabled(true);
            }
        }

    }




    public static void testUpgradeBonus(){


        new CountDownTimer(15000, 200) {

            public void onTick(long millisUntilFinished) {
                if(!upgradeTestBool){
                    upgradeTestBool = true;
                    primary_activity.cp1.setEnabled(false);
                    currClickVal = baseClickVal + (10 * (int)currPassive);



                }
            }

            public void onFinish() {
                upgradeTestBool = false;
                currClickVal = baseClickVal;
                primary_activity.cp1.setEnabled(true);

            }
        }.start();




    }




}
